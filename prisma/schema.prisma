generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model Permit {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  roles       RoleHasPermit[]
}

model Role {
  id      Int             @id @default(autoincrement())
  name    String          @unique
  users   User[]
  permits RoleHasPermit[]
}

model RoleHasPermit {
  role          Role     @relation(fields: [idRole], references: [id])
  idRole        Int
  permit        Permit   @relation(fields: [idPermit], references: [id])
  idPermit      Int
  creation_date DateTime @default(now())
  update_date   DateTime @updatedAt

  @@id([idPermit, idRole])
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String
  phone     String?
  token     String?
  active    Boolean    @default(true)
  role      Role       @relation(fields: [roleId], references: [id])
  roleId    Int
  clients   Client[]
  employees Employee[]
}

model Employee {
  user    User     @relation(fields: [id], references: [id])
  id      Int      @id
  clients Client[]
}

model Client {
  user            User      @relation(fields: [id], references: [id])
  id              Int       @id
  birthDate       DateTime?
  address         String?
  licenceValidity DateTime?
  cars            Car[]
  employee        Employee  @relation(fields: [employeeId], references: [id])
  employeeId      Int
}

model Brand {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  models Model[]
}

model Model {
  id      Int    @id @default(autoincrement())
  name    String
  year    Int
  brand   Brand  @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId Int
  cars    Car[]

  @@unique([name, year], map: "nameYear")
}

model Car {
  id                      Int       @id @default(autoincrement())
  startingKilometers      Float
  currentKilometers       Float?
  velocityLimit           Float     @default(20)
  image                   Image?
  description             String?
  insurancePolicyValidity DateTime?
  verificationValidity    DateTime?
  circulationCardValidity DateTime?
  active                  Boolean   @default(true)
  model                   Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId                 Int
  client                  Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                Int
  gps                     Gps?
}

model Gps {
  id                  Int     	@id @default(autoincrement())
  alias               String  	@unique
  latitude            Float?
  longitude           Float?
  orientation         Float?
  velocity            Float?
  active              Boolean 	@default(true)
  geofenceRadiusKm    Float?	@default(5)
  geofenceLat         Float?
  geofenceLong        Float?
  geofenceActive      Boolean   @default(false)
  car                 Car     	@relation(fields: [carId], references: [id], onDelete: Cascade)
  carId               Int     	@unique
}

model Image {
	id		Int		@id @default(autoincrement())
	alias 	String	@unique
	car    	Car? 	@relation(fields: [carId], references: [id], onDelete: Cascade)
	carId	Int?	@unique
}
